/*
 * This file is generated by jOOQ.
 */
package com.gitee.hengboy.micro.job.data.model.tables;


import com.gitee.hengboy.micro.job.data.model.Indexes;
import com.gitee.hengboy.micro.job.data.model.Keys;
import com.gitee.hengboy.micro.job.data.model.tables.records.JobNodeTriggerInfoRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * 节点任务信息
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobNodeTriggerInfo extends TableImpl<JobNodeTriggerInfoRecord> {

    private static final long serialVersionUID = 7251328;

    /**
     * The reference instance of <code>fission.job_node_trigger_info</code>
     */
    public static final JobNodeTriggerInfo JOB_NODE_TRIGGER_INFO = new JobNodeTriggerInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobNodeTriggerInfoRecord> getRecordType() {
        return JobNodeTriggerInfoRecord.class;
    }

    /**
     * The column <code>fission.job_node_trigger_info.NTI_ID</code>. 任务触发器主键
     */
    public static final TableField<JobNodeTriggerInfoRecord, Integer> NTI_ID = createField("NTI_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), JOB_NODE_TRIGGER_INFO, "任务触发器主键");

    /**
     * The column <code>fission.job_node_trigger_info.NTI_KEY</code>. 任务触发器的key，用于标识唯一性
     */
    public static final TableField<JobNodeTriggerInfoRecord, String> NTI_KEY = createField("NTI_KEY", org.jooq.impl.SQLDataType.VARCHAR(50), JOB_NODE_TRIGGER_INFO, "任务触发器的key，用于标识唯一性");

    /**
     * The column <code>fission.job_node_trigger_info.NTI_LB_STRATEGY</code>. 负载均衡策略
     */
    public static final TableField<JobNodeTriggerInfoRecord, String> NTI_LB_STRATEGY = createField("NTI_LB_STRATEGY", org.jooq.impl.SQLDataType.VARCHAR(30), JOB_NODE_TRIGGER_INFO, "负载均衡策略");

    /**
     * The column <code>fission.job_node_trigger_info.NTI_CRON</code>. 任务触发器cron表达式
     */
    public static final TableField<JobNodeTriggerInfoRecord, String> NTI_CRON = createField("NTI_CRON", org.jooq.impl.SQLDataType.VARCHAR(30), JOB_NODE_TRIGGER_INFO, "任务触发器cron表达式");

    /**
     * The column <code>fission.job_node_trigger_info.NTI_NAME</code>. 任务触发器名称
     */
    public static final TableField<JobNodeTriggerInfoRecord, String> NTI_NAME = createField("NTI_NAME", org.jooq.impl.SQLDataType.VARCHAR(50), JOB_NODE_TRIGGER_INFO, "任务触发器名称");

    /**
     * The column <code>fission.job_node_trigger_info.NTI_CREATE_TIME</code>. 创建时间
     */
    public static final TableField<JobNodeTriggerInfoRecord, Timestamp> NTI_CREATE_TIME = createField("NTI_CREATE_TIME", org.jooq.impl.SQLDataType.TIMESTAMP, JOB_NODE_TRIGGER_INFO, "创建时间");

    /**
     * The column <code>fission.job_node_trigger_info.NTI_START_TIME</code>. 启动时间
     */
    public static final TableField<JobNodeTriggerInfoRecord, Timestamp> NTI_START_TIME = createField("NTI_START_TIME", org.jooq.impl.SQLDataType.TIMESTAMP, JOB_NODE_TRIGGER_INFO, "启动时间");

    /**
     * The column <code>fission.job_node_trigger_info.NTI_JOB_CLASS</code>. 触发该任务的实现类全限定名
     */
    public static final TableField<JobNodeTriggerInfoRecord, String> NTI_JOB_CLASS = createField("NTI_JOB_CLASS", org.jooq.impl.SQLDataType.CLOB, JOB_NODE_TRIGGER_INFO, "触发该任务的实现类全限定名");

    /**
     * The column <code>fission.job_node_trigger_info.NTI_MARK</code>. 备注信息
     */
    public static final TableField<JobNodeTriggerInfoRecord, String> NTI_MARK = createField("NTI_MARK", org.jooq.impl.SQLDataType.VARCHAR(200), JOB_NODE_TRIGGER_INFO, "备注信息");

    /**
     * No further instances allowed
     */
    private JobNodeTriggerInfo() {
        this(DSL.name("job_node_trigger_info"), null);
    }

    private JobNodeTriggerInfo(Name alias, Table<JobNodeTriggerInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private JobNodeTriggerInfo(Name alias, Table<JobNodeTriggerInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("节点任务信息"));
    }

    public <O extends Record> JobNodeTriggerInfo(Table<O> child, ForeignKey<O, JobNodeTriggerInfoRecord> key) {
        super(child, key, JOB_NODE_TRIGGER_INFO);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.JOB_NODE_TRIGGER_INFO_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JobNodeTriggerInfoRecord, Integer> getIdentity() {
        return Keys.IDENTITY_JOB_NODE_TRIGGER_INFO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JobNodeTriggerInfoRecord> getPrimaryKey() {
        return Keys.KEY_JOB_NODE_TRIGGER_INFO_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JobNodeTriggerInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<JobNodeTriggerInfoRecord>>asList(Keys.KEY_JOB_NODE_TRIGGER_INFO_PRIMARY);
    }
}
